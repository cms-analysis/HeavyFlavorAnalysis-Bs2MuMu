#!/usr/bin/env perl


# ulMatrix [-d] -a "bayes" -p "prefix" -c anaBmm.plotResults.default-11.bdt.ulc

use Getopt::Std;
getopts('a:dc:L:p:tx');


if ($opt_x) {
    system("/bin/rm *.d?_?s?_?");
    die "\n";
}

if (!$opt_L) {
   $opt_L = 0.95; 
}  


if (!$opt_p) {
   $opt_p = "default-11"; 
}  

if (!$opt_a) {
   $opt_a = "cls"; 
}  

if (!$opt_c) {
   $opt_c = "anaBmm.plotResults.default-11.bdt.ulc";
}  

# -- expected observation (= sum of signal, comb bg, and peaking bg)
my @totbs;
my @totbd;
my @startbs;
my @startbd;
my @endbs;
my @endbd;

if ($opt_t) {
    for ($id0 = $startbd[0]; $id0 <= $endbd[0]; $id0++) {
	for ($is0 = $startbs[0]; $is0 <= $endbs[0]; $is0++) {
	    for ($id1 = $startbd[1]; $id1 <= $endbd[1]; $id1++) {
		for ($is1 = $startbs[1]; $is1 <= $endbs[1]; $is1++) {
		    $name = "$opt_p:ulMatrix:0s$is0"."_0d$id0"."_1s$is1"."_1d$id1:val";
		    $named = "$opt_p:ulMatrix:0s$is0"."_0d$id0"."_1s$is1"."_1d$id1:vald";
		    print "$is0 &$id0 &$is1 &$id1 &\\vuse{$name} &\\vuse{$named} \\\\ \n";
		}
		print "%\n";
	    }
		print "%\n";
	}
		print "%\n";
    }
    die "\n";
}



&readUlcFile();
&createConfigFiles();
die "\n";
&runUlCalc();
&produceTexFile(); 
die "\n";


# ----------------------------------------------------------------------
sub produceTexFile() {
    if ($opt_d) {
	open(TEX, ">ulMatrix-$opt_p.bdtomumu.tex") || die "cannot open ulMatrix-$opt_p.bdtomumu.tex\n";
    } else {
	open(TEX, ">ulMatrix-$opt_p.bstomumu.tex") || die "cannot open ulMatrix-$opt_p.bstomumu.tex\n";
    }
    for ($id0 = $startbd[0]; $id0 <= $endbd[0]; $id0++) {
	for ($is0 = $startbs[0]; $is0 <= $endbs[0]; $is0++) {
	    for ($id1 = $startbd[1]; $id1 <= $endbd[1]; $id1++) {
		for ($is1 = $startbs[1]; $is1 <= $endbs[1]; $is1++) {
		    $oname    = "$opt_a"."-"."$opt_c".".B$id0"."_$is0"."E$id1"."_$is1"; 
		    open(IN, "$oname") || die "cannot open $oname\n";
		    $line = <IN>;
		    chop($line); 
		    close(IN); 
		    ($algo, $numbers) = split(/:/, $line); 
		    $algo =~ s/Algorithm //;
		    $algo =~ s/://;
		    ($ul, $bl) = split(/\(/, $numbers); 
		    $ul = sprintf("%2.1e", $ul); 
		    ($sf0, $sf1) = split(/e/, $ul);
		    $sf1 =~ s/0//g;
		    if ($opt_d) {
			$name = "$opt_p:ulMatrix:0s$is0"."_0d$id0"."_1s$is1"."_1d$id1:vald";
		    } else {
			$name = "$opt_p:ulMatrix:0s$is0"."_0d$id0"."_1s$is1"."_1d$id1:val";
		    }
		    print "$oname: $algo $numbers -> \\vdef{$name} {\ensuremath {$sf0 \\times 10^{$sf1} } }\n";
		    print TEX "\\vdef{$name} {\\ensuremath {$sf0 \\times 10^{$sf1} } }\n";
		}
	    }
	}
    }
    close(TEX);
}


# ----------------------------------------------------------------------
sub runUlCalc() {

    for ($id0 = $startbd[0]; $id0 <= $endbd[0]; $id0++) {
	for ($is0 = $startbs[0]; $is0 <= $endbs[0]; $is0++) {
	    for ($id1 = $startbd[1]; $id1 <= $endbd[1]; $id1++) {
		for ($is1 = $startbs[1]; $is1 <= $endbs[1]; $is1++) {
		    $filename = "$opt_c".".B$id0"."_$is0"."E$id1"."_$is1"; 
		    $oname   =  "$opt_a"."-"."$opt_c".".B$id0"."_$is0"."E$id1"."_$is1"; 
		    if ($opt_d) {
			$command =  "bin/ulcalc --bdtomumu -a \"$opt_a\" -o $oname -l $opt_L --disable-errors $filename";
		    } else {
			$command =  "bin/ulcalc -a \"$opt_a\" -o $oname -l $opt_L --disable-errors $filename";
		    }
		    print "$command\n";
		    system("$command");
		}
	    }
	}
    }

}


# ----------------------------------------------------------------------
sub createConfigFiles() {

    open(IN, "$opt_c") || die "cannot open $opt_c\n";
    @lines = <IN>;
    close(IN); 

    for ($id0 = $startbd[0]; $id0 <= $endbd[0]; $id0++) {
	for ($is0 = $startbs[0]; $is0 <= $endbs[0]; $is0++) {
	    for ($id1 = $startbd[1]; $id1 <= $endbd[1]; $id1++) {
		for ($is1 = $startbs[1]; $is1 <= $endbs[1]; $is1++) {
		    $filename = "$opt_c".".B$id0"."_$is0"."E$id1"."_$is1"; 
		    print "$filename\n";
		    open(OUT, ">$filename") || die "cannot open $filename for output\n";
		    @newlines = @lines; 
		    grep(s/OBS_BSMM\s*0\t0/OBS_BSMM\t0\t$is0/, @newlines);
		    grep(s/OBS_BSMM\s*1\t0/OBS_BSMM\t1\t$is1/, @newlines);
		    grep(s/OBS_BDMM\s*0\t0/OBS_BDMM\t0\t$id0/, @newlines);
		    grep(s/OBS_BDMM\s*1\t0/OBS_BDMM\t1\t$id1/, @newlines);
		    print OUT @newlines; 
		    close(OUT); 
		}
	    }
	}
    }
}

# ----------------------------------------------------------------------
sub readUlcFile() {

    open(IN, "$opt_c") || die "cannot open $opt_c\n";
    @lines = <IN>;
    close(IN); 

    for ($i = 0; $i <= 1; $i++) {
	@matched = grep(/#EXP_OBS_BSMM\t$i\t([0-9.]{1,5})/, @lines);
	chop($matched[0]); 
	($tag, $chan, $value) = split(/\t/, $matched[0]); 
	$totbs[$i] = $value; 
	#print "matched $i: $matched[0] -> $value\n";

	@matched = grep(/#EXP_OBS_BDMM\t$i\t([0-9.]{1,5})/, @lines);
	chop($matched[0]); 
	($tag, $chan, $value) = split(/\t/, $matched[0]); 
	$totbd[$i] = $value; 
	#print "matched $i: $matched[0] -> $value\n";

	$startbs[$i] = sprintf("%d", $totbs[$i] - 2 + 0.5); if ($startbs[$i] < 0) {$startbs[$i] = 0;}
	$endbs[$i]   = sprintf("%d", $totbs[$i] + 2 + 0.5); 

	$startbd[$i] = sprintf("%d", $totbd[$i] - 2 + 0.5); if ($startbd[$i] < 0) {$startbd[$i] = 0;}
	$endbd[$i]   = sprintf("%d", $totbd[$i] + 2 + 0.5); 
	
    }
    print "expected events in barrel: $startbd[0] < $totbd[0] < $endbd[0]; $startbs[0] < $totbs[0] < $endbs[0]\n";
    print "expected events in endcap: $startbd[1] < $totbd[1] < $endbd[1]; $startbs[1] < $totbs[1] < $endbs[1]\n";
}
