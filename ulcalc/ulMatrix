#!/usr/bin/env perl

# ./ulMatrix -t -c bdt.ulc -p bdt
# ./ulMatrix -t -c cnc.ulc -p cnc

# ulMatrix [-d] -a "bayes" -p "prefix" -c anaBmm.plotResults.default-11.bdt.ulc

use Getopt::Std;
getopts('a:dc:L:p:tx');


if ($opt_x) {
    system("/bin/rm *.d?_?s?_?");
    die "\n";
}

if (!$opt_L) {
   $opt_L = 0.95; 
}  


if (!$opt_p) {
   $opt_p = "default-11"; 
}  

if (!$opt_a) {
   $opt_a = "cls"; 
}  

if (!$opt_c) {
   $opt_c = "anaBmm.plotResults.default-11.bdt.ulc";
}  

# -- expected observation (= sum of signal, comb bg, and peaking bg)
my @totbs;
my @totbd;
my @startbs;
my @startbd;
my @endbs;
my @endbd;

# -- print table template
if ($opt_t) {
    &readUlcFile(); 
    &produceTexVars("clb"); 
    &produceTexVars("cls"); 
    &produceTexVars("bayes"); 
    &produceTexTable(); 

#    &readUlCalcResults();

    die "\n";
} else {
    &readUlcFile();
    &createConfigFiles();
    die "\n";
}

# ----------------------------------------------------------------------
sub produceTexTable() {
    ($alg) = @_; 
    open(TEX, ">ulTable-$opt_p.tex") || die "cannot open ulTable-$opt_p.tex\n";
    $tcnt = 0; 
    $lcnt = 0; 
    $header = 0; 
    for ($id0 = $startbd[0]; $id0 <= $endbd[0]; $id0++) {
	for ($is0 = $startbs[0]; $is0 <= $endbs[0]; $is0++) {
	    for ($id1 = $startbd[1]; $id1 <= $endbd[1]; $id1++) {
		for ($is1 = $startbs[1]; $is1 <= $endbs[1]; $is1++) {
		    if ($header == 0) {&printHeader($tcnt, TEX); $header = 1; }
		    $name = "$opt_p:ulMatrix:0s$is0"."_0d$id0"."_1s$is1"."_1d$id1:cls";
		    $name1 = "$opt_p:ulMatrix:0s$is0"."_0d$id0"."_1s$is1"."_1d$id1:bayes";
		    $name2 = "$opt_p:ulMatrix:0s$is0"."_0d$id0"."_1s$is1"."_1d$id1:clb";
		    print TEX "$id0 &$is0 &$id1 &$is1 &\\vuse{$name} &\\vuse{$name1} &\\vuse{$name2} \\\\ \n";
		    $lcnt++; 
		    if ($lcnt > 44) {
			$lcnt = 0; 
			&printFooter(TEX); 
			$header = 0; 
			$tcnt++;
		    }
		}
		print TEX "%\n";
	    }
	    print TEX "%\n";
	}
	print TEX "%\n";
    }
    if ($header == 1) {&printFooter(TEX); }

    close(TEX);
}


# ----------------------------------------------------------------------
sub produceTexVars() {
    ($alg) = @_; 

    print "+++++ $alg\n";
    open(TEX, ">ulMatrix-$alg-$opt_p.bstomumu.tex") || die "cannot open ulMatrix-$alg-$opt_p.bstomumu.tex\n";
    if ($alg eq "clb") {
	for ($id0 = $startbd[0]; $id0 <= $endbd[0]; $id0++) {
	    for ($is0 = $startbs[0]; $is0 <= $endbs[0]; $is0++) {
		for ($id1 = $startbd[1]; $id1 <= $endbd[1]; $id1++) {
		    for ($is1 = $startbs[1]; $is1 <= $endbs[1]; $is1++) {
			# output/clb.cnc.1424.B0_3E2_2
			$oname    = "output/$alg"."."."$opt_c".".B$id0"."_$is0"."E$id1"."_$is1"; 
			open(IN, "$oname") || next; 
			$line0 = <IN>;
			$line1 = <IN>;
			$line = $line1; 
			chop($line); 
			close(IN); 
			print "==> $line\n";
			($bla, $ul) = split(/to/, $line); 
			$ul =~ s/sigmas//g;
			$name = "$opt_p:ulMatrix:0s$is0"."_0d$id0"."_1s$is1"."_1d$id1:$alg";
			if ($ul < 3.2e88) {
			    print "$oname: $bla .. $ul -> \\vdef{$name} {\\ensuremath {$ul } }\n";
			    print TEX "\\vdef{$name} {\\ensuremath {$ul}  } \n";
			} 
		    }
		}    
	    }
	}
    } else {
	for ($id0 = $startbd[0]; $id0 <= $endbd[0]; $id0++) {
	    for ($is0 = $startbs[0]; $is0 <= $endbs[0]; $is0++) {
		for ($id1 = $startbd[1]; $id1 <= $endbd[1]; $id1++) {
		    for ($is1 = $startbs[1]; $is1 <= $endbs[1]; $is1++) {
			$oname    = "output/$alg"."."."$opt_c".".B$id0"."_$is0"."E$id1"."_$is1"; 
			open(IN, "$oname") || next; 
			$line0 = <IN>;
			$line1 = <IN>;
			$line2 = <IN>;
			$line3 = <IN>;
			$line = $line2; 
			chop($line); 
			close(IN); 
			print "==> $line\n";
			($algo, $numbers) = split(/:/, $line); 
			$algo =~ s/Algorithm //;
			$algo =~ s/://;
			($ul, $bl) = split(/\(/, $numbers); 
			$ul = sprintf("%2.1e", $ul); 
			($sf0, $sf1) = split(/e/, $ul);
			$sf1 =~ s/0//g;
			$name = "$opt_p:ulMatrix:0s$is0"."_0d$id0"."_1s$is1"."_1d$id1:$alg";
			if ($ul < 3.2e-8) {
			    print "$oname: $algo $numbers -> \\vdef{$name} {\ensuremath {$sf0 \\times 10^{$sf1} } }\n";
			    print TEX "\\vdef{$name} {\\ensuremath {$sf0 \\times 10^{$sf1} } }\n";
			} 
		    }
		}
	    }
	}
    }
    close(TEX);
}


# ----------------------------------------------------------------------
sub printHeader() {
    ($ver, $OUT) = @_; 
    
    print $OUT "\\begin{table}[!htb] \n";
    print $OUT "\\begin{center} \n";
    print $OUT "\\caption{\\ulcaption} \n";
    print $OUT "\\label{tab:$opt_p:ulTable$ver} \n";
    print $OUT "\\vspace{0.1in} \n";
    print $OUT "\\begin{footnotesize} \n";
    print $OUT "\\begin{tabular}{|c|c|c|c|c|c|c|} \n";
    print $OUT "\\hline \n";
    print $OUT "\\multicolumn{2}{|c|}{Barrel}&\\multicolumn{2}{c|}{Endcap}&\\multicolumn{2}{c|}{Upper  limit} &Sensitivity\\\\ \n";
    print $OUT "\\hline \n";
    print $OUT "  \$n_{\\mathrm{obs}}(\\B)\$ &\$n_{\\mathrm{obs}}(\\Bs)\$  \n";
    print $OUT "  &\$n_{\\mathrm{obs}}(\\B)\$ &\$n_{\\mathrm{obs}}(\\Bs)\$ \n";
    print $OUT "  &CLs &Bayes &CLb\\\\ \n";

}

# ----------------------------------------------------------------------
sub printFooter() {
    ($OUT) = @_; 
    
    print $OUT "      \\hline\n";
    print $OUT "  \\end{tabular}\n";
    print $OUT "  \\end{footnotesize}\n";
    print $OUT "   \\end{center}\n";
    print $OUT "   \\end{table}\n";
    print $OUT "\\clearpage \n";
}

# ----------------------------------------------------------------------
sub readUlCalcResults() {
    for ($id0 = $startbd[0]; $id0 <= $endbd[0]; $id0++) {
	for ($is0 = $startbs[0]; $is0 <= $endbs[0]; $is0++) {
	    for ($id1 = $startbd[1]; $id1 <= $endbd[1]; $id1++) {
		for ($is1 = $startbs[1]; $is1 <= $endbs[1]; $is1++) {
		    $oname   =  "$opt_a"."."."$opt_c".".B$id0"."_$is0"."E$id1"."_$is1"; 
		    $line =  `grep 'Bs->mumu upper limit with algorithm' $oname`;
		    chop($line);
		    ($b0, $rest) = split(/:/, $line); 
		    ($ul, $rest) = split(/\(/, $rest); 
		    print "$oname: $ul\n";
		}
	    }
	}
    }

}


# ----------------------------------------------------------------------
sub createConfigFiles() {
    
    open(IN, "$opt_c") || die "cannot open $opt_c\n";
    @lines = <IN>;
    close(IN); 
    
    for ($id0 = $startbd[0]; $id0 <= $endbd[0]; $id0++) {
	for ($is0 = $startbs[0]; $is0 <= $endbs[0]; $is0++) {
	    for ($id1 = $startbd[1]; $id1 <= $endbd[1]; $id1++) {
		for ($is1 = $startbs[1]; $is1 <= $endbs[1]; $is1++) {
		    $filename = "$opt_c".".B$id0"."_$is0"."E$id1"."_$is1"; 
		    print "$filename\n";
		    open(OUT, ">$filename") || die "cannot open $filename for output\n";
		    @newlines = @lines; 
		    grep(s/OBS_BSMM\s*0\t0/OBS_BSMM\t0\t$is0/, @newlines);
		    grep(s/OBS_BSMM\s*1\t0/OBS_BSMM\t1\t$is1/, @newlines);
		    grep(s/OBS_BDMM\s*0\t0/OBS_BDMM\t0\t$id0/, @newlines);
		    grep(s/OBS_BDMM\s*1\t0/OBS_BDMM\t1\t$id1/, @newlines);
		    print OUT @newlines; 
		    close(OUT); 
		}
	    }
	}
    }
}

# ----------------------------------------------------------------------
sub readUlcFile() {
    
    open(IN, "$opt_c") || die "cannot open $opt_c\n";
    @lines = <IN>;
    close(IN); 
    
    for ($i = 0; $i <= 1; $i++) {
	@matched = grep(/#EXP_OBS_BSMM\t$i\t([0-9.]{1,5})/, @lines);
	chop($matched[0]); 
	($tag, $chan, $value) = split(/\t/, $matched[0]); 
	$totbs[$i] = $value; 
	#print "matched $i: $matched[0] -> $value\n";
	
	@matched = grep(/#EXP_OBS_BDMM\t$i\t([0-9.]{1,5})/, @lines);
	chop($matched[0]); 
	($tag, $chan, $value) = split(/\t/, $matched[0]); 
	$totbd[$i] = $value; 
	#print "matched $i: $matched[0] -> $value\n";
	
	$startbs[$i] = sprintf("%d", $totbs[$i] - 2 + 0.5); if ($startbs[$i] < 0) {$startbs[$i] = 0;}
	$endbs[$i]   = sprintf("%d", $totbs[$i] + 2 + 0.5); 
	
	$startbd[$i] = sprintf("%d", $totbd[$i] - 1 + 0.5); if ($startbd[$i] < 0) {$startbd[$i] = 0;}
	$endbd[$i]   = sprintf("%d", $totbd[$i] + 1 + 0.5); 
	
    }
    print "expected events in barrel: $startbd[0] < $totbd[0] < $endbd[0]; $startbs[0] < $totbs[0] < $endbs[0]\n";
    print "expected events in endcap: $startbd[1] < $totbd[1] < $endbd[1]; $startbs[1] < $totbs[1] < $endbs[1]\n";
}
