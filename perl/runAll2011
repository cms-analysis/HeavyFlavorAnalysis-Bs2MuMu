#!/usr/bin/env perl

# Usage: cd chains/subdir; runAll -t tarfile [-h] [-m] [-n] [-r] [-a] [-d]
# ------
#            -d                           printout only, don't do anything
#            -h                           hadd the output rootfiles
#            -C                           run crashed jobs
#            -s {mc,data,signal,norm,cs}  run jobs of a specific sample
#            -r rootdir                   place where to put output
#
# 2011/11/14 added rare backgrounds (again)
# 2011/10/27 changed to new candAna setup
# 2011/05/26 realized that same dataset name will lead to problems on identical WN!
# 2011/05/17 added rare backgrounds
# 2010/11/25 remove inclusion of old merged file in dataset-* list ...
# 2010/11/23 first shot
# 2010/12/14 bug fix to allow really n wildcards (in addition to the trailing -*)
# 2013/03/01 added -l option: used to add the last directory name to where to save the output files
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the 
#
# Author    Urs Langenegger <urs.langenegger@psi.ch>
# Modified by	Jose Lazo-Flores <Jose.Lazo-Flores@cern.ch>
# ----------------------------------------------------------------------
use Getopt::Std;
getopts('Cdhj:r:s:t:v:l:');

if ($opt_l) {
    $location = $opt_l; 
} else {
    die "===> Provide a directory name where output root file should go! Example: mc, data...\n";
}

my $job = "2011/$location";
if ($opt_j) {
    $job = $opt_j; 
}

if ($opt_v) {
    $version = $opt_v; 
} else {
    $version = "v14";
}

my $rootdir = "$version/bmm/$job"; 
if ($opt_r) {
    $rootdir = $opt_r; 
}


%jobs = (
    "signal Bs2MuMu MC mix"  
    => "-y 2011 -m,bmm2Reader.mix-Bs2MuMu,cbmm-2011-$version-mix-Bs2MuMu-0*,$version-mix-Bs2MuMu.root"
    , "signal Bd2MuMu MC mix"  
    => "-y 2011 -m,bmm2Reader.mix-Bd2MuMu,cbmm-2011-$version-mix-Bd2MuMu-0*,$version-mix-Bd2MuMu.root"
	#
    #, "signal Bx2MuMu MC 2e33"  
    #=> "-y 2011 -m,bmm2Reader.2e33-Bs2MuMu,cbmm-2011-$version-2e33-Bx2MuMu-0*,$version-2e33-Bx2MuMu.root"
    #, "signal By2MuMu MC 2e33"  
    #=> "-y 2011 -m,bmm2Reader.2e33-Bs2MuMu,cbmm-2011-$version-2e33-By2MuMu-0*,$version-2e33-By2MuMu.root"
    #
    , "norm Bu2JpsiK MC mix"  
    => "-y 2011 -m,bmm2Reader.mix-Bu2JpsiK,cbmm-2011-$version-mix-Bu2JpsiK-*,$version-mix-Bu2JpsiK.root"
    , "acc Bu2JpsiK MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bu2JpsiK,cbmm-2011-$version-2e33-accBu2JpsiK-*,$version-2e33-accBu2JpsiK.root"
    #
    , "cs Bs2JpsiPhi MC mix"  
    => "-y 2011 -m,bmm2Reader.mix-Bs2JpsiPhi,cbmm-2011-$version-mix-Bs2JpsiPhi-*,$version-mix-Bs2JpsiPhi.root"
    , "acc Bs2JpsiPhi MC"  
    => "-y 2011 -m,bmm2Reader.mix-Bs2JpsiPhi,cbmm-2011-$version-2e33-accBs2JpsiPhi-*,$version-2e33-accBs2JpsiPhi.root"
    #
    , "acc Bd2PiMuNu MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bd2PiMuNu,cbmm-2011-$version-2e33-accBd2PiMuNu-*,$version-2e33-accBd2PiMuNu.root"
	#
    , "rare Bs2KMuNu MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bs2KMuNu,cbmm-2011-$version-2e33-Bs2KMuNu-*,$version-2e33-Bs2KMuNu.root"
    , "rare Bd2PiMuNu MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bd2PiMuNu,cbmm-2011-$version-2e33-Bd2PiMuNu-*,$version-2e33-Bd2PiMuNu.root"
    , "rare Lb2PMuNu MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Lb2PMuNu,cbmm-2011-$version-2e33-Lb2PMuNu-*,$version-2e33-Lb2PMuNu.root"
    , "rare Bs2KK MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bs2KK,cbmm-2011-$version-2e33-Bs2KK-*,$version-2e33-Bs2KK.root"
    , "rare Bs2KPi MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bs2KPi,cbmm-2011-$version-2e33-Bs2KPi-*,$version-2e33-Bs2KPi.root"
    , "rare Bs2PiPi MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bs2PiPi,cbmm-2011-$version-2e33-Bs2PiPi-*,$version-2e33-Bs2PiPi.root"
    , "rare Bd2KK MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bd2KK,cbmm-2011-$version-2e33-Bd2KK-*,$version-2e33-Bd2KK.root"
    , "rare Bd2KPi MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bd2KPi,cbmm-2011-$version-2e33-Bd2KPi-*,$version-2e33-Bd2KPi.root"
    , "rare Bd2PiPi MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bd2PiPi,cbmm-2011-$version-2e33-Bd2PiPi-*,$version-2e33-Bd2PiPi.root"
    , "rare Bd2RhoPi MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bd2RhoPi,cbmm-2011-$version-2e33-Bd2RhoPi-*,$version-2e33-Bd2RhoPi.root"
    , "rare Lb2KP MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Lb2KP,cbmm-2011-$version-2e33-Lb2KP-*,$version-2e33-Lb2KP.root"
    , "rare Lb2PiP MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Lb2PiP,cbmm-2011-$version-2e33-Lb2PiP-*,$version-2e33-Lb2PiP.root"
    , "rare Bu2PiMuMu MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bu2PiMuMu,cbmm-2011-$version-2e33-Bu2PiMuMu-*,$version-2e33-Bu2PiMuMu.root"
    , "rare Bu2JpsiPi MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bu2JpsiPi,cbmm-2011-$version-2e33-Bu2JpsiPi-*,$version-2e33-Bu2JpsiPi.root"
    , "rare Bu2MuMuK MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bu2MuMuK,cbmm-2011-$version-2e33-Bu2KMuMu-*,$version-2e33-Bu2MuMuK.root"
    , "rare Bs2PhiMuMu MC"  
    => "-y 2011 -m,bmm2Reader.2e33-Bs2PhiMuMu,cbmm-2011-$version-2e33-Bs2PhiMuMu-*,$version-2e33-Bs2PhiMuMu.root"
    , "rare Bd2DstarPi MC"  
    => "-y 2011 -m,bmm2Reader.Bd2DstarPi.2011,cbmm-2011-$version-2e33-Bd2DstarPi-*,$version-2e33-Bd2DstarPi.root"
    #
    , "data 2011 bmm"  
    => "-y 2011 -b 1,bmm2Reader.2011,cbmm-2011-$version-MuOnia__Run2011*,$version-2011-bmm-data.root"
    #, "data 2011 onia"  
    #=> "-y 2011 -b 1,bmm2Reader.2011,conia-2011-$version-MuOnia__Run2011*,$version-2011-onia-data.root"
    # 
    #, "bmt jet"  
    #=> "-y 2011 -b 1,bmt2Reader.data,cbmt-$version-Jet-*,$version-bmt-Jet.root"
    #, "bmt ht"  
    #=> "-y 2011 -b 1,bmt2Reader.data,cbmt-$version-HT-*,$version-bmt-HT.root"
    #, "bmt photon"  
    #=> "-y 2011 -b 1,bmt2Reader.data,cbmt-$version-Photon-*,$version-bmt-Photon.root"
    );

my $scrtuser  = $ENV{'USER'};
my $user  = bstomumu;

my $tarfile = "../../../../../130301.tar.gz";
if ($opt_t) {
    $tarfile = $opt_t; 
} else {
    if ($opt_h) {
    } else {
	die "provide a tarfile!\n";
    }
}

my $crash = ""; 
if ($opt_C) {$crash = "-C";}

#my $srmcmd  = "srmcp -2 --streams_num=1";
my $srmcmd  = "lcg-cp -b -D srmv2";
my $dcap    = "dcap://t3se01.psi.ch:22125/pnfs/psi.ch/cms/trivcat";
my $scratch = "/shome/$scrtuser/scratch"; # /scratch is likely too small
my $srm     = "srm://t3se01.psi.ch:8443/srm/managerv2\\?SFN=/pnfs/psi.ch/cms/trivcat/store";
my $storage = "$srm/user/$user/$rootdir";

#my $runCommand = "run $queue $crash -c ../../treeNoCompNoSE.csh -t $tarfile -m batch";
#my $runCommand = "run $crash -c ../../treeNoComp.csh -t $tarfile -m batch";
my $runCommand = "run $crash -c ../../treeNoCompSpecialRoot.csh -t $tarfile -m batch";


# ----------------------------------------------------------------------
# -- run hadd instead of submitting
if ($opt_h) {
    # print "srmls $storage | grep root\n";
    @lines = `srmls $storage | grep root`;
    #@lines = `ls $storage/* | grep root`;

    foreach $j (keys %jobs) {
	if ($opt_s =~ /1e33/   && !($j =~ /1e33/)) {next; }
	if ($opt_s =~ /2e33/   && !($j =~ /2e33/)) {next; }
	if ($opt_s =~ /3e33/   && !($j =~ /3e33/)) {next; }
	if ($opt_s =~ /signal/ && !($j =~ /signal/)) {next; }
	if ($opt_s =~ /cs/     && !($j =~ /cs/)) {next; }
	if ($opt_s =~ /norm/   && !($j =~ /norm/)) {next; }
	if ($opt_s =~ /data/   && !($j =~ /data/)) {next; }
	if ($opt_s =~ /mc/     && !($j =~ /MC/)) {next; }
	if ($opt_s =~ /rare/   && !($j =~ /rare/)) {next; }
	if ($opt_s =~ /acc/    && !($j =~ /acc/)) {next; }
	if ($opt_s =~ /bmt/    && !($j =~ /bmt/)) {next; }
	# -- skip bmt jobs if not explicitely requested
	if (!($opt_s =~ /bmt/) && ($j =~ /bmt/)) {next; }

	($options, $cutfile, $dataset, $output) = split(/,/, $jobs{$j});
	
	$dataset =~ s/-\*//;
	$dataset =~ s/\*/.\*/g;
	print "dataset = $dataset\n";
	print "file = $output\n";
	@rootfiles = grep(/$dataset/, @lines); 
	@rootfiles = grep(/\.root/, @rootfiles); 
	@rootfiles = grep(s/\n//, @rootfiles); 
	if ($#rootfiles == 0) {
	    @rootfiles = grep(s/.*$user\/$rootdir\///, @rootfiles); 
	    if ($opt_d) {
		# print "cp $rootfiles[0] $scratch/$output \n";
		print "===> In here!! \n";
		print "$srmcmd $storage/$rootfiles[0] $storage/$output \n";		
		print "$srmcmd $storage/$rootfiles[0] file:///$scratch/$output \n";
	    } else {
		# print "cp $rootfiles[0] $scratch/$output \n";
		# system("/bin/cp $rootfiles[0] $scratch/$output");
		print "$srmcmd $storage/$rootfiles[0] $storage/$output \n";
		system("$srmcmd $storage/$rootfiles[0] $storage/$output");
		print "$srmcmd $storage/$rootfiles[0] file:///$scratch/$output \n";
		system("$srmcmd $storage/$rootfiles[0] file:///$scratch/$output");
	    }	    
	} elsif ($#rootfiles > 0) {
	    @rootfiles = grep(s/.*\/trivcat/$dcap/, @rootfiles); 
	    if ($opt_d) {
		print "hadd $scratch/$output \n";
		foreach $f (@rootfiles) {print "  $f\n";}
		print "hadd $scratch/$output @rootfiles \n";
		print "$srmcmd file:///$scratch/$output $storage/$class/$output \n";
	    } else {
		print "hadd $scratch/$output @rootfiles\n";
		if (-e "$scratch/$output") {unlink("$scratch/$output"); }
		system("hadd $scratch/$output @rootfiles");
		system("srmrm $storage/$class/$output");
		system("$srmcmd file:///$scratch/$output $storage/$class/$output");
	    }
	}
    }
    
    die "that's it \n";
}


# ----------------------------------------------------------------------
# -- submit the jobs
foreach $j (keys %jobs) {
    ($options, $cutfile, $dataset, $output) = split(/,/, $jobs{$j});
    if ($opt_s =~ /1e33/   && !($j =~ /1e33/)) {next; }
    if ($opt_s =~ /2e33/   && !($j =~ /2e33/)) {next; }
    if ($opt_s =~ /3e33/   && !($j =~ /3e33/)) {next; }
    if ($opt_s =~ /data/   && !($j =~ /data/)) {next; }
    if ($opt_s =~ /norm/   && !($j =~ /norm/)) {next; }
    if ($opt_s =~ /signal/ && !($j =~ /signal/)) {next; }
    if ($opt_s =~ /cs/     && !($j =~ /cs/)) {next; }
    if ($opt_s =~ /mc/     && !($j =~ /MC/)) {next; }
    if ($opt_s =~ /rare/   && !($j =~ /rare/)) {next; }
    if ($opt_s =~ /acc/    && !($j =~ /acc/)) {next; }
    if ($opt_s =~ /bmt/    && !($j =~ /bmt/)) {next; }
    # -- skip bmt jobs if not explicitely requested
    if (!($opt_s =~ /bmt/) && ($j =~ /bmt/)) {next; }  

    if ($j =~ /data/) {
	$command = "$runCommand -q all.q -x 'bin/runBmm2 $options -C cuts/$cutfile' -r 'STORAGE1 $storage/$class' ./$dataset"; 
    } else {
	$command = "$runCommand -q all.q -x 'bin/runBmm2 $options -C cuts/$cutfile' -r 'STORAGE1 $storage/$class' ./$dataset"; 
    }

    if ($opt_d) {
	print "$j \n$command\n";
    } else {
	print "$command\n";
	system($command);
    }

}

