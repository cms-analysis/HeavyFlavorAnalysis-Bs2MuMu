#!/usr/bin/env perl

# Usage:       monGrid [-i jobs.list] [-u grid-url] [-o]
# ------
#              check status of grid jobs
#              if done, retrieve sandbox and put files into job directory 
#              if sandbox retrieved, check for successful job completion
#
# 2010/03/03   First version
#              
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the 
#
# Author    Urs Langenegger <urs.langenegger@psi.ch>
# ----------------------------------------------------------------------

use Getopt::Std;
getopts('i:ou:');

# -- jobs list
my $jobslist = "jobs.list";
if ($opt_i) {
    $jobslist = $opt_i;
}

# -- which glite commands
my $gliteStatus = `which glite-wms-job-status`; chop($gliteStatus); 
if ($gliteStatus eq "") {
    die "glite-wms-job-status not found, cannot run without this\n";
}
my $gliteOutput = `which glite-wms-job-output`; chop($gliteOutput); 
if ($gliteOutput eq "") {
    die "glite-wms-job-output not found, cannot run without this\n";
}
$gliteOutput = $gliteOutput." --noint";

my $jobDestination  = ""; 
my $jobStatus       = ""; 
my $jobExitCode     = ""; 
my $jobStatusReason = ""; 

open(IN, $jobslist) || die "Cannot find file $joblist with grid jobs\n";
while(<IN>) {
    next if (/\#\#\#/);

    # -- parse one job: one URL and one additional line with information
    $url  = $_;   chop($url); 
    $line = <IN>; chop($line); 
    $line =~ s/\# //;
    ($machine, $date, $time, $dir, $jdl) = split(/ /, $line); 
    $pwd = `pwd`; chop($pwd);
    $mdir = $dir;
    $mdir =~ s%$pwd/%%;

    # -- if a specific URL is given, skip all others
    if ($opt_u && $url ne $opt_u) {
	next; 
    }

    # -- get job status
    $gliteResult = `$gliteStatus $url`; 
    parseStatus($gliteResult); 

    # -- get output sandbox if successful and not yet already happened and not vetoed
    if ($jobStatus =~ /Done/ && $opt_o) {
	$ok = getOutputSandBox($url, $dir, $jdl, $jobStatus); 
    	printf("%60s %s %15s; %s\n", $mdir, $url, $jobStatus, $ok);
    } elsif ($jobStatus =~ /Cleared/ && $opt_o) {
	$ok = getOutputSandBox($url, $dir, $jdl, $jobStatus); 
    	printf("%60s %s %15s; %s\n", $mdir, $url, $jobStatus, $ok);
    } else {
    	printf("%60s %s %15s: %s\n", $mdir, $url, $jobStatus, $jobStatusReason);
    }

}




# ----------------------------------------------------------------------
sub parseStatus {
    ($in) = @_;
    @in = split(/\n/, $in); 
    foreach $line (@in) {
	if ($line =~ s/Current Status:\ *//) { $jobStatus = $line; }
	if ($line =~ s/Status Reason:\ *//)  { $jobStatusReason = $line; }
	if ($line =~ s/Exit code:\ *//)      { $jobExitCode = $line; }
	if ($line =~ s/Destination:\ *//)    { $jobDestination = $line; }
    }

}


# ----------------------------------------------------------------------
sub getOutputSandBox {
    ($lurl, $ldir, $ljdl, $lstatus) = @_;
    if ($lstatus =~ /Cleared/){
    } else {
	system("$gliteOutput --dir $ldir $lurl >& /dev/null"); 
    }
    # -- determine logfile from jdl: 
    $logfile = `/bin/grep StdOutput $ldir/$ljdl`;
    $logfile =~ s/StdOutput\ *//;
    $logfile =~ s/\"//g;
    $logfile =~ s/\;//g;
    $logfile =~ s/= //g;

    # -- now search for possible problems in the logfile
    $foundException = `/bin/grep -i cms::exception  $ldir/$logfile`;
    if ($foundException) { $return = "cms::exception found"; }

    $foundMyEnd     = `/bin/grep -i "runGrid: This is the end, my friend"  $ldir/$logfile`;
    if ($foundMyEnd) { $return = "no problems seen"; }


    return $return;
}
