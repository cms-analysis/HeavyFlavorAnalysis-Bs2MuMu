#! /usr/bin/env perl

# Usage:  countEvents [-g] [-j] tmp-*
# ------
#
# 2012/03/23   add -j to allow counting reco files as well (to force renaming to junk, use -j then)
# 2011/09/28   rename to junk if no event generated
# 2011/09/20   rename to junk if no logfile or no rootfile
# 2011/09/16   Bug fix for missing space in PYTHIA printout
# 2010/03/10   First version
#              
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the 
#
# Author    Urs Langenegger <urs.langenegger@psi.ch>
# ----------------------------------------------------------------------

use Getopt::Std;
getopts('agj');

my $totalCnt = 0; 
my $totalGen = 0; 
my $fileCnt  = 0; 
my $files    = 0; 
my $pfileCnt = 0; 

foreach $dir (@ARGV) {
    ($bfile = $dir) =~ s/tmp-//g;
    $file = "$dir/$bfile"; 
    $file .= ".log"; 
    if (-e "$dir/NOK") {
	print "==> skipping $dir because of NOK, renaming directory to junk\n";
	if ($opt_j) {rename("$dir", "junk-$bfile");}
	next;
    }

    if (!-e $file) {
	# print "$file not found, looking for ";
	$file =~ s/\.log/\.sge\.log/;
	# print "$file \n";
	if (!-e $file) {
	    print "$file not found, renaming directory to junk\n";
	    if ($opt_j) {rename("$dir", "junk-$bfile");}
	    next;
	}
    }

    if ($opt_g) {&cntGen($file);}
    if ($opt_r) {&cntReco($file);}
    if ($opt_a) {
	&cntAna($file);
	$totalCnt += $pfileCnt; 
    }

    
}

print " ----------------------------------------------------------------------\n";
print " Looked at $files files\n";
if ($opt_a) {
    print " Total number of processed events: $totalCnt\n";
} else {
    print " Total number of generated events: $totalGen\n";
}
print " ----------------------------------------------------------------------\n";


# ----------------------------------------------------------------------
sub cntGen {
    ($file) = @_;
    open(IN, "$file") || die "cannot find $file\n";
    $files++; 
    $pfileCnt = -1; 
    $generated = -1; 
    $fileCnt = 0; 
    while (<IN>) {
	if (/Begin processing the ([0-9]*)[a-z]{2} record/) {
	    $fileCnt = $1; 
	}
	
	if (/ I   0 All included subprocesses/) {
	    s/I//g;
	    @pythiaOutput = split(/\s{1,99}/);
	    $pfileCnt = $pythiaOutput[5];
	} elsif (/I   0 All included subprocesses/) {
	    s/I//g;
	    @pythiaOutput = split(/\s{1,99}/);
	    $pfileCnt = $pythiaOutput[5];
	} elsif (/All included subprocesses/) {
	    s/I//g;
	    @pythiaOutput = split(/\s{1,99}/);
	    for ($i = 0; $i < $#pythiaOutput; $i++) {
		if ($pythiaOutput[$i] eq "subprocesses") {
		    $pfileCnt = $pythiaOutput[$i+1];
		    last;
		}
	    }
	} elsif (/^All included subprocesses/) {
	    s/I//g;
	    @pythiaOutput = split(/\s{1,99}/);
	    $pfileCnt = $pythiaOutput[3];
	} elsif ($opt_g && /Save output to SE/) {
	    chop;
	    ($bla, $dc) = split(/trivcat/);
	    print "===$dc===\n";
	    $doesitexist = `srmls srm://t3se01.psi.ch:8443/srm/managerv2\?SFN=/pnfs/psi.ch/cms/trivcat$dc`;
	    if ($? == 0) {
		@bla = `root -q -b -x '/shome/ursl/macros/cntEvents.C\(\"dcap://t3se01.psi.ch:22125/pnfs/psi.ch/cms/trivcat/$dc\"\);'`; 
		@ble = grep(/CNTEVENTS/, @bla); 
		$ble = pop(@ble); 
		($bla, $generated) = split(/:/, $ble); 
		chop($generated);
		print "++++ $generated\n";
	    } else {
		print "$dc not found, renaming directory to junk\n";
		if ($opt_j) {rename("$dir", "junk-$bfile");}
		$pfileCnt = 0; 
		$fileCnt = 0; 
		$files--; 
	    }
	}
    }
    close(IN); 
}


# ----------------------------------------------------------------------
sub cntAna {
    ($file) = @_;
    open(IN, "$file") || die "cannot find $file\n";
    $files++; 
    $pfileCnt = -1; 
    $generated = -1; 
    $fileCnt = 0; 
    while (<IN>) {
	if (/Begin processing the ([0-9]*)[a-z]{2} record/) {
	    $fileCnt = $1; 
	}
	
	if (/TrigReport Events total = ([0-9]*)/) {
	    $pfileCnt = $1; 
	    printf("%10d %s\n", $pfileCnt, $file); 
	    break;
	}
	    
    }
    close(IN); 
}
