#!/usr/bin/env perl

# ----------------------------------------------------------------------
#
# Usage: srmLs -x URI -p pattern [-s 13362] [-c] [-C] [-b basename -n 10G]
# -----
#          -c  create output suitable for chain files
#          -b  combine files into chainbasename_i as long as its size < $opt_n
#          -p  pattern to search for
#
# Examples:  srmLs -x srm://t3se01.psi.ch:8443/srm/managerv2\?SFN=/pnfs/psi.ch/cms/trivcat/store/user/ursl/root/dana/v06-data -p \\.root -s 13362 
#
#
# History: 2010/04/29 First shot
#          2010/05/03 Bug fix
#          2010/10/18 Produce chains with maximum size
#          2011/05/17 -C to produce only /store/... lists
#          2012/05/07 migrate to lcg-ls
# ----------------------------------------------------------------------

$cprefix = "dcap://t3se01.psi.ch:22125/pnfs/psi.ch/cms/trivcat";

# -- Get arguments
use Getopt::Std;
getopts('b:cCn:p:x:s:');

# -- cross check for chain production
if ($opt_n && !$opt_b) {die "provide a maximum size if requesting split chain files\n";}
if ($opt_b && !$opt_n) {die "provide a base filename if requesting split chain files\n";}

# -- replace characters with numbers
if ($opt_n  =~ /M/i) {$opt_n =~ s/M/000000/ig;}
if ($opt_n  =~ /G/i) {$opt_n =~ s/G/000000000/ig;}

$prefix = substr($opt_x, 0, index($opt_x, '/store')); 
@filelist = `srmls $opt_x`; 

# -- migration to lcg-ls
# assume printout of the following form: 
# -rw-rw-r--   1     2     2 1581348806               ONLINE /pnfs/psi.ch/cms/trivcat/store/user/bstomumu/v16/bla.root
#	* Checksum: 364c78ef (adler32)
#	* Space tokens: 7522060

@filelist = `lcg-ls -l $opt_x`; 
@filelist = grep(!/Checksum/, @filelist);
@filelist = grep(!/Space tokens/, @filelist);
@filelist = grep(s/\ {1,99}/ /g, @filelist);
foreach $line (@filelist) {
    @parts = split(/ /, $line); 
    $line = $parts[4] . " " . $parts[6]; 
}

my $sum = 0; 
my $fidx = 0; 
$filename = "$opt_b"."_$fidx";
if ($opt_b) {open(OUT, ">$filename") || die "Cannot open $filename\n";}

foreach $f (@filelist) {
    chop($f);
    $f =~ s/^\ *//g;
    if (($opt_p eq "") && !($f =~ /\.root/)) {next; } # skip empty lines if no pattern is provided
    if (($opt_p eq "") || ($f =~ /$opt_p/)) {
	# -- search for pattern
	($size, $file) = split(/ /, $f, 2); 
	$lfn = substr($file, rindex($file, '/store')+1, length($file)); 
	$ffn = $prefix."/".$lfn;
	# print "lfn: $lfn -> $size\n";
	if ($opt_c) {
	    print "$cprefix/$lfn\n";
	# } elsif ($opt_p && !$opt_s) {
	} elsif ($opt_C) {
	    print "/$lfn\n";
	} elsif (!$opt_s) {
	    print "$size $ffn\n";
	}

	# -- determine size
	if ($opt_s) {
	    if ($size < $opt_s) {
		print "$size $ffn\n";
	    }
	}

	if ($opt_b) {
	    print "sum = $sum, adding $size, for a total of ";
	    $sum += $size;
	    print "$sum\n";
	    if ($sum < $opt_n) {
		print OUT "$cprefix/$lfn\n";
	    } else {
		$sum = $size;
		close (OUT); 
		$fidx++;
		$filename = "$opt_b"."_$fidx";
		open(OUT, ">$filename") || die "Cannot open $filename\n";
		print OUT "$cprefix/$lfn\n";
	    }		
	}
	
    }
}

