#!/usr/bin/env perl

# Usage: cd chains/subdir; runAll -t tarfile [-h] [-m] [-n] [-r] [-a] [-d]
# ------
#            -d            printout only, don't do anything
#            -h            hadd the output rootfiles
#            -C            run crashed jobs
#            -c            run data ("CMS") jobs
#            -m            run MC jobs
#            -n            run normalization jobs
#            -s            run signal jobs
#            -a            run Bs2JpsiPhi jobs
#            -r rootdir    place where to put output
#
# 2010/11/23 first shot
# 2010/11/25 remove inclusion of old merged file in dataset-* list ...
# 2010/12/14 bug fix to allow really n wildcards (in addition to the trailing -*)
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the 
#
# Author    Urs Langenegger <urs.langenegger@psi.ch>
# ----------------------------------------------------------------------

use Getopt::Std;
getopts('aCcdhj:mnsr:t:');

my $job = "default";
if ($opt_j) {
    $job = $opt_j; 
}

my %jobs = ("signal MC" 
	    => "-m,bmmSignalReader,bmmSignalReader.$job.cuts,cBsToMuMu_2MuPtFilter_7TeV-pythia6-evtgen-Fall10,signalMC2011.root"
#	    , "signal MC 2" # backgrounds
#	    => "-m,bmmSignalReader,bmmSignalReader.$job.cuts,cB*ToJPsiMuMu_2MuPEtaFilter_7TeV-pythia6-evtgen-Fall10-*,signal-bgMC.root"
#	    , "signal MC 3" # backgrounds
#	    => "-m,bmmSignalReader,bmmSignalReader.$job.cuts,cppMuX-Summer10-*,signal-ppMuX.root"
#	    , "signal MC 4" # backgrounds
#	    => "-m,bmmSignalReader,bmmSignalReader.$job.cuts,cQCD_2MuPEtaFilter_7TeV-pythia6-Fall10-*,signal-qcd2mu.root"
	    , "signal data" 
	    => "-b 1,bmmSignalReader,bmmSignalReader.$job.cuts,cMu*-Run2011*PromptReco-v1-*,signalData2011.root"
	    , "norm MC" 
	    => "-m,bmmNormalizationReader,bmmNormalizationReader.$job.cuts,cBpToJPsiMuMu_2MuPEtaFilter_7TeV-pythia6-evtgen-Fall10-*,normMC2011.root"
	    , "norm data" 
	    => "-b 0,bmmNormalizationReader,bmmNormalizationReader.$job.cuts,cMu*-Run2011*PromptReco-v1-*,normData2011.root"
	    , "Bs2JpsiPhi MC" 
	    => "-m,bmmBs2JpsiPhiReader,bmmBs2JpsiPhiReader.$job.cuts,cBsToJPsiMuMu_2MuPEtaFilter_7TeV-pythia6-evtgen-Fall10-*,Bs2JpsiPhiMC2011.root"
	    , "Bs2JpsiPhi data" 
	    => "-b 0,bmmBs2JpsiPhiReader,bmmBs2JpsiPhiReader.$job.cuts,cMu*-Run2011*PromptReco-v1-*,Bs2JpsiPhiData2011.root"
    );

my $user  = $ENV{'USER'};

my $tarfile = "../../../../../101123.tar.gz";
if ($opt_t) {
    $tarfile = $opt_t; 
} else {
    if ($opt_h) {
    } else {
	die "provide a tarfile!\n";
    }
}

my $crash = ""; 
if ($opt_C) {$crash = "-C";}

my $rootdir = "bmm"; 
if ($opt_r) {
    $rootdir = $opt_r; 
}
my $storage = "srm://t3se01.psi.ch:8443/srm/managerv2\\?SFN=/pnfs/psi.ch/cms/trivcat/store/user/ursl/$rootdir";
my $srmcmd = "srmcp -2 --streams_num=1";
my $dcap = "dcap://t3se01.psi.ch:22125/pnfs/psi.ch/cms/trivcat";
#my $scratch = "/scratch/$user"; 
my $scratch = "/shome/$user/scratch"; 

my $runCommand = "run $crash -c ../../treeNoComp.csh -t $tarfile -m batch";


# ----------------------------------------------------------------------
# -- run hadd instead of submitting
if ($opt_h) {
    foreach $j (keys %jobs) {
	if ($opt_c && !($j =~ /data/)) {next; }
	if ($opt_n && !($j =~ /norm/)) {next; }
	if ($opt_s && !($j =~ /signal/)) {next; }
	if ($opt_a && !($j =~ /Bs2JpsiPhi/)) {next; }
	if ($opt_m && !($j =~ /MC/)) {next; }
	($options, $class, $cutfile, $dataset, $output) = split(/,/, $jobs{$j});
	@lines = `srmls $storage/$class | grep root`;
	
	$dataset =~ s/-\*//;
	$dataset =~ s/\*/.\*/g;
	print "dataset = $dataset\n";
	print "file = $output\n";
#	@rootfiles = grep(/$dataset-[0-9]{1,3}/, @lines); 
	@rootfiles = grep(/$dataset/, @lines); 
	@rootfiles = grep(/\.root/, @rootfiles); 
	@rootfiles = grep(s/.*\/trivcat/$dcap/, @rootfiles); 
	@rootfiles = grep(s/\n//, @rootfiles); 
	if ($#rootfiles > -1) {
	    if ($opt_d) {
		print "hadd $scratch/$output \n";
		foreach $f (@rootfiles) {print "  $f\n";}
	    } else {
		print "hadd $scratch/$output @rootfiles\n";
		if (-e "$scratch/$output") {unlink("/scratch/$user/$output"); }
		system("hadd $scratch/$output @rootfiles");
		system("srmrm $storage/$class/$output");
		system("$srmcmd file:///$scratch/$output $storage/$class/$output");
	    }
	}
    }
    
    die "that's it \n";
}


# ----------------------------------------------------------------------
# -- submit the jobs
foreach $j (keys %jobs) {
    ($options, $class, $cutfile, $dataset, $output) = split(/,/, $jobs{$j});
    $command = "$runCommand -x 'bin/runTreeReaders -r $class $options -C cuts/$cutfile' -r 'STORAGE1 $storage/$class' ../$dataset"; 
    if ($opt_c && !($j =~ /data/)) {next; }
    if ($opt_n && !($j =~ /norm/)) {next; }
    if ($opt_s && !($j =~ /signal/)) {next; }
    if ($opt_a && !($j =~ /Bs2JpsiPhi/)) {next; }
    if ($opt_m && !($j =~ /MC/)) {next; }

    if ($opt_d) {
	print "$j \n$command\n";
    } else {
	print "$command\n";
	system($command);
    }

}

