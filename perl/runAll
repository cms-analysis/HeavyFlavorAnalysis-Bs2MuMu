#!/usr/bin/env perl

# Usage: cd chains/subdir; runAll -t tarfile [-h] [-m] [-n] [-r] [-a] [-d]
# ------
#            -d                           printout only, don't do anything
#            -h                           hadd the output rootfiles
#            -C                           run crashed jobs
#            -s {mc,data,signal,norm,cs}  run jobs of a specific sample
#            -r rootdir                   place where to put output
#
# 2011/10/27 changed to new candAna setup
# 2011/05/26 realized that same dataset name will lead to problems on identical WN!
# 2011/05/17 added rare backgrounds
# 2010/11/25 remove inclusion of old merged file in dataset-* list ...
# 2010/11/23 first shot
# 2010/12/14 bug fix to allow really n wildcards (in addition to the trailing -*)
# ----------------------------------------------------------------------
# Send all questions, wishes and complaints to the 
#
# Author    Urs Langenegger <urs.langenegger@psi.ch>
# ----------------------------------------------------------------------
use Getopt::Std;
getopts('Cdhj:q:r:s:t:v:');

#use Tie::IxHash;

my $job = "2011";
if ($opt_j) {
    $job = $opt_j; 
}

my $rootdir = "bmm/$job"; 
if ($opt_r) {
    $rootdir = $opt_r; 
}

if ($opt_v) {
    $version = $opt_v; 
} else {
    $version = "v10";
}

#tie %jobs, "Tie::IxHash";

%jobs = (
    "signal Bs2MuMu MC 2e33"  
    => "-m,bmm2Reader.2e33-Bs2MuMu,cbmm-$version-2e33-Bs2MuMu,$version-2e33-Bs2MuMu.root"
    , "signal Bs2MuMu MC 3e33"  
    => "-m,bmm2Reader.3e33-Bs2MuMu,cbmm-$version-3e33-Bs2MuMu,$version-3e33-Bs2MuMu.root"
    , "signal Bd2MuMu MC 2e33"  
    => "-m,bmm2Reader.2e33-Bd2MuMu,cbmm-$version-2e33-Bd2MuMu,$version-2e33-Bd2MuMu.root"
    , "signal Bd2MuMu MC 3e33"  
    => "-m,bmm2Reader.3e33-Bd2MuMu,cbmm-$version-2e33-Bd2MuMu,$version-3e33-Bd2MuMu.root"
    #
    , "norm Bu2JpsiK MC 2e33"  
    => "-m,bmm2Reader.2e33-Bu2JpsiK,cbmm-$version-2e33-Bu2JpsiK-*,$version-2e33-Bu2JpsiK.root"
    , "norm Bu2JpsiK MC 3e33"  
    => "-m,bmm2Reader.3e33-Bu2JpsiK,cbmm-$version-3e33-Bu2JpsiK-*,$version-3e33-Bu2JpsiK.root"
    #
    , "cs Bs2JpsiPhi MC 2e33"  
    => "-m,bmm2Reader.2e33-Bs2JpsiPhi,cbmm-$version-2e33-Bs2JpsiPhi,$version-2e33-Bs2JpsiPhi.root"
    , "cs Bs2JpsiPhi MC 3e33"  
    => "-m,bmm2Reader.3e33-Bs2JpsiPhi,cbmm-$version-3e33-Bs2JpsiPhi,$version-3e33-Bs2JpsiPhi.root"
    #
    , "data 2011"  
    => "-m,bmm2Reader.data,cbmm-$version-Run2011*,$version-2011-data.root"
    );

my $user  = $ENV{'USER'};

my $tarfile = "../../../../../111027.tar.gz";
if ($opt_t) {
    $tarfile = $opt_t; 
} else {
    if ($opt_h) {
    } else {
	die "provide a tarfile!\n";
    }
}

my $crash = ""; 
if ($opt_C) {$crash = "-C";}

my $queue = ""; 
if (!$opt_q) {
    if (!$opt_h) {
	print "-q not set\n";
	$queue = "-q short.q";
    } else {
	# do nothing when merging
    }
} else {
    $queue = "-q $opt_q";
}

my $storage = "/shome/ursl/scratch/$rootdir";
my $srmcmd = "srmcp -2 --streams_num=1";
my $dcap = "dcap://t3se01.psi.ch:22125/pnfs/psi.ch/cms/trivcat";
#my $scratch = "/scratch/$user"; 
my $scratch = "/shome/$user/scratch"; 

my $runCommand = "run $queue $crash -c ../../treeNoCompNoSE.csh -t $tarfile -m batch";


# ----------------------------------------------------------------------
# -- run hadd instead of submitting
if ($opt_h) {
    foreach $j (keys %jobs) {
	if ($opt_s =~ /2e33/   && !($j =~ /2e33/)) {next; }
	if ($opt_s =~ /3e33/   && !($j =~ /3e33/)) {next; }
	if ($opt_s =~ /signal/ && !($j =~ /signal/)) {next; }
	if ($opt_s =~ /cs/     && !($j =~ /cs/)) {next; }
	if ($opt_s =~ /norm/   && !($j =~ /norm/)) {next; }
	if ($opt_s =~ /data/   && !($j =~ /data/)) {next; }
	if ($opt_s =~ /mc/     && !($j =~ /MC/)) {next; }
	($options, $cutfile, $dataset, $output) = split(/,/, $jobs{$j});
	#@lines = `srmls $storage/$class | grep root`;
	@lines = `ls $storage/* | grep root`;
	
	$dataset =~ s/-\*//;
	$dataset =~ s/\*/.\*/g;
	print "dataset = $dataset\n";
	print "file = $output\n";
	@rootfiles = grep(/$dataset/, @lines); 
	@rootfiles = grep(/\.root/, @rootfiles); 
	#@rootfiles = grep(s/.*\/trivcat/$dcap/, @rootfiles); 
	@rootfiles = grep(s/\n//, @rootfiles); 
	if ($#rootfiles == 0) {
	    if ($opt_d) {
		print "cp $rootfiles[0] $scratch/$output \n";
	    } else {
		print "cp $rootfiles[0] $scratch/$output \n";
		system("/bin/cp $rootfiles[0] $scratch/$output");
	    }	    
	} elsif ($#rootfiles > 0) {
	    if ($opt_d) {
		print "hadd $scratch/$output \n";
		foreach $f (@rootfiles) {print "  $f\n";}
	    } else {
		print "hadd $scratch/$output @rootfiles\n";
		if (-e "$scratch/$output") {unlink("/scratch/$user/$output"); }
		system("hadd $scratch/$output @rootfiles");
		#system("srmrm $storage/$class/$output");
		#system("$srmcmd file:///$scratch/$output $storage/$class/$output");
	    }
	}
    }
    
    die "that's it \n";
}


# ----------------------------------------------------------------------
# -- submit the jobs
foreach $j (keys %jobs) {
    ($options, $cutfile, $dataset, $output) = split(/,/, $jobs{$j});
    $command = "$runCommand -x 'bin/runBmm2 $options -C cuts/$cutfile' -r 'STORAGE1 $storage/$class' ./$dataset"; 
    if ($opt_s =~ /2e33/   && !($j =~ /2e33/)) {next; }
    if ($opt_s =~ /3e33/   && !($j =~ /3e33/)) {next; }
    if ($opt_s =~ /data/   && !($j =~ /data/)) {next; }
    if ($opt_s =~ /norm/   && !($j =~ /norm/)) {next; }
    if ($opt_s =~ /signal/ && !($j =~ /signal/)) {next; }
    if ($opt_s =~ /cs/     && !($j =~ /cs/)) {next; }
    if ($opt_s =~ /mc/     && !($j =~ /MC/)) {next; }

    if ($opt_d) {
	print "$j \n$command\n";
    } else {
	print "$command\n";
	system($command);
    }

}

